/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
//hello
#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"
//#include "AdjMatrices.h"
#include <fstream>
#include <iostream>
#include <string>
#include <vector>
#include <unordered_set>
#include <sstream>
#include "ns3/adjmatrixmodule.h"
using namespace std;
using namespace ns3;

//copy paste adjmatrices.h
#include <vector>
#include <unordered_set>
#include <string>
#include <iostream>
#include <fstream>
#include <sstream>
#include <time.h>

class AdjMatrices {
    private:
        int portCount;
        int size;
        const int rotationTime = 3;
        vector<vector<vector<int>>> matchesArray;
        void createMatrix(string line);
        int currentMatchingIndex;

    public:
        
        /* Initialize a ‘AdjMatrices’ object from a csv file
         * @param matchinglist_csv Input CSV file to be read 
         */

        AdjMatrices(const char* matchinglist_csv);

        void getMatrixSize(string line);
        /* Accessor Function to check port connections
         * @param source port
         * @param destination port
         */
        bool existing_connection(vector<vector<int>> adjMat, int source, int destination);

        /* Checks that each input port is connected to at most one output port.
         * Checks that each output port is connected to at most one input port.
         */
        bool injectiveCheck();

        bool correctMatchingTimeCheck(int targetTime);

        void printAllMatchings();

        void printCurrentMatching();

        void next_matching_index(int time);

        int getRotationTime();

};


//AdjMatrices.cc start

vector<string> splitString (string line, string delimiter){
    vector<string> toReturn;
    // size_t pos = 0;
    // string token;
    // cout << line << endl;
    // while ((pos = line.find(delimiter)) != string::npos) { 
    //     token = line.substr(0, pos);
    //     cout << "Printing current token: " << token << "! lets go." <<endl;
    //     toReturn.push_back(token);
    //     line.erase(0, pos + delimiter.length());
    // }
    //[1]
    auto start = 0U;
    auto end = line.find(delimiter);
    while (end != string::npos)
    {
        toReturn.push_back(line.substr(start, end - start));
        start = end + delimiter.length();
        end = line.find(delimiter, start);
    }
    toReturn.push_back(line.substr(start, end));

    
    return toReturn;
}
//[1]moswald, stackoverflow, 2021


//calls the splitString method and gets node count from the pairs. 
//In the csv, matchings are(should) be one to one, so we have 
void AdjMatrices::getMatrixSize(string line){
    //{"0 7", "1 8", "2 9", "3 10", "4 11", "5 6"}
    size = splitString(line, ",").size();
    //size = 6;
}

// constructor
//Takes in a csv file name and goes line by line
//3 Total variables, and int for souce, destination, and size + string for the line
//For each line, get get the size of the matrix by calling getSize. 
//call the createMatrix method that takes in a sting and size parameter
//set the size based on the matchings size array  
AdjMatrices::AdjMatrices(const char* matchinglist_csv){
    
    ifstream ip(matchinglist_csv);

    string matrix;
    while(ip.good()){
        getline(ip, matrix,'\n');
        getMatrixSize(matrix);
        createMatrix(matrix);
    }
    portCount = size * 2;
    currentMatchingIndex = 0;
}



//Takes in a line of csv file and a size
//calls the splitString method
void AdjMatrices::createMatrix(string line){
    vector<vector<int>> matrix (size, vector<int>(size, 0));
    vector<string> matchings;
    vector<string> pairs;

    matchings = splitString(line, ","); // {{"0 3"}, {"1 2"}}
    cout << "line: " << line << endl;

    for(auto string : matchings){
        pairs = splitString(string, " "); //{"0"} {"3"}
        int source = stoi(pairs[0]);
        int dest = (stoi(pairs[1]) - size);
        matrix[source][dest] = 1;
    }

    matchesArray.push_back(matrix);
}

 bool AdjMatrices::existing_connection(vector<vector<int>> adjMat, int source, int destination){
    if(source < 0 || source >= size || destination < size || destination >= 2*size){
         cout << "Error Out of Bounds" << endl;
        return 0;
     }
     return adjMat[source][destination - size] == 1;
}

//Checks if a graph is one-to-one. Checks for typos in csv file
bool AdjMatrices::injectiveCheck(){
    vector<vector<int>> matchingToCheck;
    int sCount = 0;
    int dCount = 0;
    int matching = 0;
    bool failureFlag = false;
    for(auto m : matchesArray){
        matchingToCheck = m;
        for(int i = 0; i < size; i++){
            for(int j = 0; j < size; j++){
                if(matchingToCheck[i][j] == 1) sCount++;
                if(matchingToCheck[j][i] == 1) dCount++;
                if(sCount > 1){
                    cout << "Source port " << i << " has more than 1 destination connections in matching " << matching << endl;
                    failureFlag = true;
                }
                if(dCount > 1){
                    cout << "Destination port " << (i+size) << " has more than 1 source ports in matching " << matching << endl;
                    failureFlag = true;
                }
            }
            sCount = 0;
            dCount = 0;
        }
        matching++;
    }

    if (failureFlag == false){  
        cout << "The matchings passed the inductive test!" << endl;
        return true;
    }
    else{
        cout << "The matchings did not pass the inductive test!" << endl;
        return false;
    }
}



void AdjMatrices::next_matching_index(int time){
    currentMatchingIndex = (time / rotationTime) % matchesArray.size();
}


bool AdjMatrices::correctMatchingTimeCheck(int targetTime){
    //Matching changes every 3500 nanoseconds.
    //Matching 0: 0-3499        0-2.999     9-11.9999
    //Matching 1: 3500-6999     3-5.999     12-
    //Matching 2: 7000-10499    6-8.9999
    //


    //time t = 8 seconds, so which matching should return 2. 
    // 11 seconds it should be matching 0
    int expected_Matching_index = (targetTime/rotationTime) % matchesArray.size();
    //11/3 = 3%3 = 0;
    //12/3 = 4%3 = 1
  
    if(matchesArray[expected_Matching_index] == matchesArray[currentMatchingIndex]){
        cout << "Correct matching at current time" << endl;
        return true;
    } 
    else{
        cout << "Incorrect matching at current time" << endl;
        return false;
    }

    
}

void AdjMatrices::printCurrentMatching(){
    //auto m = matchesArray[currentMatchingIndex];

    cout << "for matching " << currentMatchingIndex << endl;
    cout << "Size " << size << endl;
    //int size = 6;
    
    for(int i = 0; i < size; i++){ 
        for(int j = 0; j < size; j++){
            if(existing_connection(matchesArray[currentMatchingIndex], i, (j+size))){
                cout << i << " " << (j + size) << endl;
            }
        }
    }
}

void AdjMatrices::printAllMatchings(){
    int matchIndex = 0;
    for(auto m : matchesArray){
        cout << "for matching " << matchIndex << endl;
        for(int i = 0; i < size; i++){
            for(int j = 0; j < size; j++){
                if(existing_connection(m, i, (j+size))){
                    cout << i << " " << (j + size) << endl;
                }
            }
        }
        matchIndex++;
    }
}

int AdjMatrices::getRotationTime(){
    return rotationTime;
}



//AdjMatrices.cc end

















NS_LOG_COMPONENT_DEFINE ("FirstScriptExample");
//contents of .h file here 
  //header file is a defintion of the functions
  //need address in memory, so compiler can give it a location

//contents of .cc file here
  //

int
main (int argc, char *argv[])
{
  CommandLine cmd;
  cmd.Parse (argc, argv);
  
  /*Time::SetResolution (Time::NS);
  LogComponentEnable ("UdpEchoClientApplication", LOG_LEVEL_INFO);
  LogComponentEnable ("UdpEchoServerApplication", LOG_LEVEL_INFO); */

  AdjMatrices* adjmatrix = new AdjMatrices("matchings.csv"); //argv[2]

  // //cout << "Performing injective test" << endl;

  //Viratic Function (like printf())
                                        //pointer to function                 //function arguments
  //int time = 3;

  //&AdjMatrices::
//  Simulator::Schedule (NanoSeconds (1), &(adjmatrix->printCurrentMatching));

  // double currTime = 0;
  // int rotationTime = adjmatrix->getRotationTime();

  // while(1){
  //   //currTime = Simulator::Now().GetSeconds();
  //   cout << "Currrent Time: " << currTime << endl;

  //   if(currTime == rotationTime){
  //     adjmatrix->next_matching_index(currTime);
  //     break;
  //   }
  // }

  
  //adjmatrix->printCurrentMatching();

  cout << "Done!" << endl;
  delete adjmatrix;


  //TIME  
  //Time t (3.14e9);  // Pi seconds
  //std::cout << t.As (Time::MS) << std::endl;
  

  
  /*NodeContainer nodes;
  nodes.Create (2);

  PointToPointHelper pointToPoint;
  pointToPoint.SetDeviceAttribute ("DataRate", StringValue ("5Mbps"));
  pointToPoint.SetChannelAttribute ("Delay", StringValue ("2ms"));

  NetDeviceContainer devices;
  devices = pointToPoint.Install (nodes);

  InternetStackHelper stack;
  stack.Install (nodes);

  Ipv4AddressHelper address;
  address.SetBase ("10.1.1.0", "255.255.255.0");

  Ipv4InterfaceContainer interfaces = address.Assign (devices);

  UdpEchoServerHelper echoServer (9);

  ApplicationContainer serverApps = echoServer.Install (nodes.Get (1));
  serverApps.Start (Seconds (1.0));
  serverApps.Stop (Seconds (10.0));

  UdpEchoClientHelper echoClient (interfaces.GetAddress (1), 9);
  echoClient.SetAttribute ("MaxPackets", UintegerValue (1));
  echoClient.SetAttribute ("Interval", TimeValue (Seconds (1.0)));
  echoClient.SetAttribute ("PacketSize", UintegerValue (1024));

  ApplicationContainer clientApps = echoClient.Install (nodes.Get (0));
  clientApps.Start (Seconds (2.0));
  clientApps.Stop (Seconds (10.0)); */

  Simulator::Run ();
  Simulator::Destroy ();
  return 0;
}



